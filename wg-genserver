#!/usr/bin/bash
# Simple-wg - generate wireguard host conf

# Script - This application will help you create or delete wireguard configs (profiles).
# Secondary script: wg-genclient, will help create clients for each profile.
#  
# Dependencies: wireguard-tools, qrencode
# Testet on Fedora 40 + ubuntu 24.04
#
# Date:      July 21. - 2024
# Author:    Thor Miller Grotle
# Homepage:  https://www.itso.dk




# TODO 
# Set Allowed IP / Subnet
# Add Colors to terminal
# Nicer listing for existing profiles
# Ask for preshared key?
# Tune sysctl and allow firewall?

# Setting umask so created file will have correct permissions
umask 077

# Define all variables
bold=$(tput bold)
normal=$(tput sgr0)
wgprofile=""
wgbaseinterface=""
wgdns=""
wgdns2=""
wglistenport=""
wgendpoint=""
wgaddress=""
CLIENTCONFDIR=""
SERVERCONFDIR=""
WIREGUARDCPROFILE=""
WIREGUARDSPROFILE=""
WIREGUARDPROFILE=""
WIREKEYDIR=""
WIREGUARDINI=""
WGADDCLIENTS=""
clientcounter=""
setcreate=""
sethelp=""
setcreate=""
setlist=""


function show_help () {
	echo "${bold}This application needs to be run with admin priviledges as it writes to /etc/wireguard"
	echo "${normal}"

	echo " -${bold}h${normal} :  Displays this help screen"
	echo " -${bold}L${normal} :  List all Profiles"
	echo " -${bold}C${normal} :  Start the Profile creation"
	echo " -${bold}D${normal} :  Start the Profile deletion"
	echo ""
	echo " -p :  Defines profile"
	echo " -i :  Defines the Network interface wireguard profiles binds to"
	echo " -l :  Defines the port wireguards listenening on"
	echo " -e :  Define the Endport IP/hostname of the wireguard server"
	echo " -a :  Define the internal network address of the wireguard network"
	echo " -d :  Define DNS server for wireguard client"
	echo " -s :  Define secondary DNS server for wireguard client"
	echo ""
	echo 'Config files will be written into the following folders:'
	echo '   "/etc/wireguard/"            - Wireguard conf file'
	echo '   "/etc/wireguard/profile/"    - Wireguard Profile INI file'
	echo '   "/etc/wireguard/serverconf"  - Server config for each client (Will be read upon "wg up interface"'
	echo '   "/etc/wireguard/clientconf/" - Client profile for each client (Give this to the client)'
	echo ""
	echo "Example: wg-genserver -C -p business-network -i eth0"
	echo ""
	echo ""
	echo "You can bring up/down wireguard profile with wg-quick"
	echo "  wg-quick up wg0"
	echo "  wg-quick down wg0"
	echo ""
	echo "Check curernt status of wireguard:"
	echo " wg"
	echo ""
	echo "You can have wireguard automaticly bring up wireguard using systemd with the following command:"
	echo "  systemctl enable wg-quick@wg0.service"
	echo ""
	echo "If you are using own bind9 dns server, make sure to add wireguard ip range into allow list"
	echo "If you are using simple-router or firewalld zones to share internet, make sure to add interface to zone and sharing policy" 
	echo ""
	echo "See also application: wg, wg-quick, wg-genclient"
	echo ""
	}

function List_Profiles {
	echo "Listing existing wireguard profiles"
	ls /etc/wireguard/profiles/*.ini 2> /dev/null

	}


function Ask_Profile {
        # Check if root user
        if [ "$EUID" -ne 0 ]
        then 
                echo "Please run as root"
                echo ""
                exit
        fi
	    # Check if wireguard is installed
        if [ ! -f /usr/bin/wg ]; then
                echo "Pre-check: wireguard-tools has not been installed: Please install these before proceding "
                installcounter=1
	        else
                echo "Pre-check: wireguard-tools installed - check ok" 
        fi
		# Check if qrencode is installed
        if [ ! -f /usr/bin/qrencode ]; then
                echo "Pre-check: qrencode has not been installed: Please install these before proceding "
                installcounter=1
        else 
                echo "Pre-check: qrencoder installed - check ok" 
        fi

		# Check if net-tools is installed
        if [ ! -f /usr/sbin/ifconfig ]; then
                echo "Pre-check: net-tools has not been installed: Please install these before proceding "
                installcounter=1
        else 
                echo "Pre-check: net-tools installed - check ok" 
        fi


		# check if package forwarding have been enabled for IP4
        if ! grep -Fxq "net.ipv4.ip_forward = 1" /etc/sysctl.conf; then
                echo "Pre-check: Package forward for IPV4 not enabled"
                echo 'Please run: echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf'
                installcounter=1

			else
                echo "Pre-check: Network package forward setting - check ok"
				sysctl -p >> /dev/null
        fi 
	if [ ! -z ${installcounter} ]; then
		echo "system not ready for wireguard"
		exit
	fi
		echo ""
        echo "Starting profile generation"
        echo ""
        # list profiles .ini


        # read parameter and for profile for if profile is correct, if no profile exist or input use default = wireguard.ini
        if [ -z "$wgprofile" ];
                then
                        read -p "Enter name of desired profile? : " wgprofile
                        if [ -z "$wgprofile" ];
                                then
                                wgprofile=wireguard
                        fi
        fi


                CLIENTCONFDIR=/etc/wireguard/clientconf/$wgprofile
                SERVERCONFDIR=/etc/wireguard/serverconf/$wgprofile
                WIREGUARDCPROFILE=$CLIENTCONFDIR$NEWCLIENTNAME.conf
                WIREGUARDSPROFILE=$SERVERCONFDIR$NEWCLIENTNAME.conf
                WIREGUARDPROFILE=/etc/wireguard/$wgprofile.conf
                WIREKEYDIR=/etc/wireguard/keypair
                WIREGUARDINI=/etc/wireguard/profiles/$wgprofile.ini
                WGADDCLIENTS=/etc/wireguard/wgaddclients-$wgprofile


        # Check if INI file exist and ask to to show file and to overwrite file
                        if [ -f $WIREGUARDINI ]; then
                                read -p "Profile $wgprofile file exists, do you want to view Profile (y) ?: "  Ask
                                if [[  $Ask = "y"  ]];
                                        then
                                        echo $WIREGUARDINI
                                        cat $WIREGUARDINI
                        fi

                        else
                        Ask_Details
                        fi

}



function Ask_Details {



	# List network interfaces for connection
	echo "-------------------------------------"
	echo "Listing current interfaces and IP"
	echo "-------------------------------------"
	ip address
	echo ""
	echo "-------------------------------------"


	# Ask for interface
	if [ -z "$wgbaseinterface" ];
		then
		wgbaseinterfacesuggest=$(ls /sys/class/net/ | grep -v 'lo' | head -1)

		read -p "Which network interface do you want to bind this wireguard instance to (default: "$wgbaseinterfacesuggest")?: " wgbaseinterface
		if [ -z "$wgbaseinterface" ];
			then
			wgbaseinterface=$wgbaseinterfacesuggest
		fi
	fi

	# Ask for endpoint address
	if [ -z "$wgendpoint" ];
		then
		wgendpointsuggest=$(ifconfig $wgbaseinterface | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
		read -p "What is the Wireguard server IP or URL will the clients connect to, (default "$wgendpointsuggest")? : " wgendpoint
		if [ -z "$wgendpoint" ];
			then
			wgendpoint=$wgendpointsuggest
		fi
	fi

	# Ask for WG network address ( default 192.168.125.1)
	if [ -z "$wgaddress" ];
		then
		segment=$(shuf -i 200-250 -n 1)
		wgaddresssuggest="10.0."$segment".1"
		read -p "What is the IP address of the wireguard network, (Suggested Internal IP for wireguard server: "$wgaddresssuggest )? : " wgaddress
		if [ -z "$wgaddress" ];
			then
			wgaddress=$wgaddresssuggest
		fi
	fi

	# Ask for portnumber ( default 51820 )
	if [ -z "$wglistenport" ];
		wglistenportsuggest=$(shuf -i 51820-51900 -n 1)
		then
		read -p "What is the port (Suggest: "$wglistenportsuggest")? : " wglistenport
		if [ -z "$wglistenport" ];
			then
			wglistenport=$wglistenportsuggest
		fi
	fi

	# Ask for Client DNS (default 8.8.8.8)
	if [ -z "$wgdns" ];
	        then
			$wgdnssuggest=$(resolvectl status $wgbaseinterface | grep "Current DNS" | cut -f 4  -d " ")
	        read -p "What DNS do you wish to use for the clients, suggested DNS: $wgdnssuggest ? " wgdns
	        if [ -z "swgdns" ];
	                then
	                wgdns="8.8.8.8"
	        fi
	fi

	# Ask for Client Secondary DNS/Namesearch (default home.lan)
	if [ -z "$wgdns2" ];
	        then
		if [ -f /etc/resolv.conf ]
			then
			wgdns2suggest=$(grep search /etc/resolv.conf | cut -d" " -f 2 | tail -1)
		else
			wgdns2suggest="home.lan"
		fi
	        read -p "What Namesearch network or sendondary DNS do you wish to use for the clients, (Suggest: "$wgdns2suggest")?: " wgdns2
	        if [ -z "$wgdns2" ];
	                then
	                wgdns2=home.lan
	        fi
	fi
	echo ""
	echo "-------------------------------------"
	echo "profile                : " $wgprofile 
	echo "Interface to mount to  : " $wgbaseinterface
	echo "Interface port         : " $wglistenport 
	echo "Interface Server IP    : " $wgendpoint 
	echo "Wireguard Client DNS   : " $wgdns 
	echo "Wireguard Client DNS2  : " $wgdns2
	echo "Wireguard Host IP      : " $wgaddress
	echo "-------------------------------------"


	# Asking if choices are correct, else start over

	read -p "Is this the confing you want?: (y) " Ask
	if [[  $Ask = "y"  ]];
		then
		Create_ServerConfig
	elif [[ $Ask = "n" ]];
		then
		wgbaseinterface=""
		wgdns=""
		wgdns2=""
		wglistenport=""
		wgendpoint=""
		wgaddress=""
		Ask_Details
	else
		echo "No input"
	fi
}

function Create_ServerConfig {

		# creating workdirs
		mkdir -p /etc/wireguard/profiles
		mkdir -p $CLIENTCONFDIR
		mkdir -p /etc/wireguard/keypair
		mkdir -p $SERVERCONFDIR
		touch $SERVERCONFDIR/default.conf


		# Generate ini file file 
			    echo 'Creating file: '$WIREGUARDINI
				serverprivatekey=$( wg genkey | tee $WIREKEYDIR/serverkey )
				serverpubkey=$( wg pubkey < $WIREKEYDIR/serverkey | tee $WIREKEYDIR/pubserverkey )
				clientcounter=1
				echo "#Wireguard config file - generated by wg-genserver" > $WIREGUARDINI
				echo "wgprofile=$wgprofile" >> $WIREGUARDINI
				echo "serverprivatekey="$serverprivatekey >> $WIREGUARDINI
				echo "serverpubkey="$serverpubkey >> $WIREGUARDINI
				echo "wgbaseinterface=$wgbaseinterface" >> $WIREGUARDINI
				echo "wgaddress="$wgaddress >> $WIREGUARDINI
				echo "wglistenport="$wglistenport >> $WIREGUARDINI
				echo "wgendpoint="$wgendpoint >> $WIREGUARDINI
				echo "wgdns="$wgdns >> $WIREGUARDINI
				echo "wgdns2="$wgdns2 >> $WIREGUARDINI
				echo "CLIENTCONFDIR="$CLIENTCONFDIR >> $WIREGUARDINI
				echo "SERVERCONFDIR="$SERVERCONFDIR >> $WIREGUARDINI
				echo "WIREGUARDINI="$WIREGUARDINI >> $WIREGUARDINI
				echo "WIREGUARDPROFILE="$WIREGUARDPROFILE >> $WIREGUARDINI
				echo "WGADDCLIENTS="$WGADDCLIENTS >> $WIREGUARDINI
				echo "WIREKEYDIR=/etc/wireguard/keypair" >> $WIREGUARDINI
				echo "clientcounter=1" >> $WIREGUARDINI
				rm $WIREKEYDIR/*


		# generate main wireguard config file
		source $WIREGUARDINI
				echo 'Creating file: '$WIREGUARDPROFILE
				echo "#Wireguard profile file - generated by wg-genserver" > $WIREGUARDPROFILE
				echo "[Interface]" >> $WIREGUARDPROFILE
				echo "Address = "$wgaddress/24 >> $WIREGUARDPROFILE
				echo "ListenPort = "$wglistenport >> $WIREGUARDPROFILE
				echo "PrivateKey = "$serverprivatekey >> $WIREGUARDPROFILE
				echo "PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o "$wgbaseinterface" -j MASQUERADE && $WGADDCLIENTS" >> $WIREGUARDPROFILE
				echo "PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o "$wgbaseinterface" -j MASQUERADE" >> $WIREGUARDPROFILE


		# generate main wireguard addclients executable
				echo "Creating file: " $WGADDCLIENTS
				echo "#!/usr/bin/bash" > $WGADDCLIENTS
				echo "#Wireguard script to start add client file to $wgprofile - generated by wg-genserver" >> $WGADDCLIENTS
				echo "source $WIREGUARDINI" >> $WGADDCLIENTS
				echo ""
				echo 'echo "Loading client peers for profile: $wgprofile"' >> $WGADDCLIENTS
				echo "sleep 2"
				echo "for filename in $SERVERCONFDIR/*.conf; do" >> $WGADDCLIENTS
				echo 'echo $filename' >> $WGADDCLIENTS
				echo 'wg addconf $wgprofile  $filename' >> $WGADDCLIENTS
				echo 'done' >> $WGADDCLIENTS
				chmod +x $WGADDCLIENTS
		# Ask to bring up wireguard interface
#		echo ""
		echo " Profile has been created, to add clients, run wg-genclient -C -p "$wgprofile
		echo " To bring up interface manually, run: wg-quick up "$wgprofile
		echo " To bring up on systemctl, run: systemctl enable wg-quick@"$wgprofile
		echo ""

		read -p "Do you want to activate Profile: $wgprofile?: " Ask
		echo ""

		if [[  $Ask = "y"  ]];
			then
			wg-quick up $wgprofile
			echo ""

		fi




	}

function Delete_Profile {
	# Check if root user
	if [ "$EUID" -ne 0 ]
	then 
		echo "Please run as root"
		echo ""
		exit
	fi
	# check if profile has been set
        if [ -z "$wgprofile" ];
                then
                List_Profiles
                read -p "Input desired profile to you wish delete?: " wgprofile
                        if [ -z "$wgprofile" ];
                        then
                                echo "No profile selected"
                                exit
                        fi
        fi

	#Loading Variables
	WIREGUARDINI=/etc/wireguard/profiles/$wgprofile.ini
	source $WIREGUARDINI 2> /dev/null
	CLIENTCONFDIR=/etc/wireguard/clientconf/$wgprofile
        SERVERCONFDIR=/etc/wireguard/serverconf/$wgprofile

	# Check if profile counter exists, exit if not.
	if [ -z "$clientcounter" ];
		then
		echo "No profile with that name exist"
		exit
	fi

	echo "Profile selected:" ${bold}" $wgprofile" ${normal}
	echo "Clients under this profile:" ${bold}
		ls $SERVERCONFDIR
	echo "${normal}"
        read -p "Are you sure you want to DELETE this profile and all clients: ${bold}$wgprofile${normal} (y)?: " Ask
        if [[  $Ask = "y"  ]];
                then
		echo "Stopping wireguard profile if running"
		wg-quick down $wgprofile 2> /dev/null
		sleep 5
		echo "Removing files"
                rm -rf  $CLIENTCONFDIR -v
                rm -rf  $SERVERCONFDIR -v
		rm $WIREGUARDINI -v
		rm $WGADDCLIENTS -v
		rm $WIREGUARDPROFILE -v
        fi
        }





### Main  Application Starter

	# Defining variable from flags at launch

	while getopts "p:i:d:l:e:a:s:hCLD" flag; do
	    case "${flag}" in
	        p) wgprofile=${OPTARG};;
	        i) wgbaseinterface=${OPTARG};;
	        d) wgdns=${OPTARG};;
	        s) wgdns2=${OPTARG};;
	        l) wglistenport=${OPTARG};;
	        e) wgendpoint=${OPTARG};;
	        a) wgaddress=${OPTARG};;
	        C) setcreate='true' ;;
		h) sethelp='true' ;;
		L) setlist='true' ;;
		D) setdelete='true' ;;
	    esac
	done

	# Create welcome banner
	echo "--------------- simple-wg -----------------"
	echo " - the simple wireguard config generator -"
	echo "-------------------------------------------"

	# Determine actions from inputflags
	if [[ $sethelp = 'true' ]];
		then
		show_help
	elif [[ $setlist == 'true' ]];
		then
		List_Profiles
	elif [[ $setcreate == 'true' ]];
		then
		Ask_Profile
	elif [[ $setdelete == 'true' ]];
		then
		Delete_Profile 

	else
		echo "No option or invalid option selected. Select -${bold}C${normal} for Profile create, select -${bold}L${normal} for Profile List, select -${bold}D${normal} for Profile Delete, select -h for help."
		echo ""
	fi
